# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'build_infra'
on:
  workflow_dispatch:
    inputs:
      env:
        description: 배포 환경
        type: choice
        required: true
        options:
          - prod
          - dev

permissions:
  contents: read

jobs:
  set_environment:
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ steps.set_environment.outputs.project_name }}
      env: ${{ steps.set_environment.outputs.env }}
    steps:
      - id: set_environment
        name: Set Environment
        run: |
          echo "project_name=$(echo "${{ github.repository }}" | sed "s|${{ github.repository_owner }}\/||g")" >> $GITHUB_OUTPUT

  build_vpc:
    runs-on: ubuntu_latest
    needs: [set_environment]
    steps:
      - name: 파일 포맷팅
        id: fmt
        run: terraform fmt -check

      - name: VPC 준비 중
        id: plan_vpc
        working-directory: ${{ env.working-directory }}/vpc
        env:
          TF_VAR_AWS_ACESST_KEY: "${{secrets.AWS_ACCESS_KEY}}"
          TF_VAR_AWS_SECRET_ACCESS_KEY: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
          TF_VAR_PROJECT_NAME: ${{needs.set_environment.outputs.project_name}}
          TF_VAR_REPO_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
        run: terraform plan

      # - name: VPC 생성
      #   id: apply_vpc
      #   working-directory: ${{ env.working-directory }}
      #   env:
      #     TF_VAR_AWS_ACESST_KEY: "${{secrets.AWS_ACCESS_KEY}}"
      #     TF_VAR_AWS_SECRET_ACCESS_KEY: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
      #     TF_VAR_PROJECT_NAME: ${{needs.set_environment.outputs.project_name}}
      #     TF_VAR_REPO_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
      #   run: terraform apply -auto-approve -input=false

  build_sg:
    runs-on: ubuntu_latest
    needs: [ build_vpc ]
    steps:
      - name: 배포 환경 인프라 파일 포맷팅
        id: fmt
        run: terraform fmt -check

      - name: 보안그룹 생성 준비
        id: plan_sg
        working-directory: ${{ env.working-directory }}/sg
        env:
          TF_VAR_AWS_ACESST_KEY: "${{secrets.AWS_ACCESS_KEY}}"
          TF_VAR_AWS_SECRET_ACCESS_KEY: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
          TF_VAR_PROJECT_NAME: ${{needs.set_environment.outputs.project_name}}
          TF_VAR_REPO_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
        run: terraform plan

      # - name: 보안그룹 생성
      #   id: apply_sg
      #   working-directory: ${{ env.working-directory }}
      #   env:
      #     TF_VAR_AWS_ACESST_KEY: "${{secrets.AWS_ACCESS_KEY}}"
      #     TF_VAR_AWS_SECRET_ACCESS_KEY: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
      #     TF_VAR_PROJECT_NAME: ${{needs.set_environment.outputs.project_name}}
      #     TF_VAR_REPO_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
      #   run: terraform apply -auto-approve -input=false

  build_sm:
    runs-on: ubuntu_latest
    needs: [ build_sg ]
    steps:
      - name: 파일 포맷팅
        id: fmt
        run: terraform fmt -check

      - name: Secret Manager 생성 준비
        id: plan_sm
        working-directory: ${{ env.working-directory }}/sg
        env:
          TF_VAR_AWS_ACESST_KEY: "${{secrets.AWS_ACCESS_KEY}}"
          TF_VAR_AWS_SECRET_ACCESS_KEY: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
          TF_VAR_PROJECT_NAME: ${{needs.set_environment.outputs.project_name}}
          TF_VAR_REPO_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
        run: terraform plan

      # - name: Secret Manager 생성
      #   id: apply_sm
      #   working-directory: ${{ env.working-directory }}/sm
      #   env:
      #     TF_VAR_AWS_ACESST_KEY: "${{secrets.AWS_ACCESS_KEY}}"
      #     TF_VAR_AWS_SECRET_ACCESS_KEY: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
      #     TF_VAR_PROJECT_NAME: ${{needs.set_environment.outputs.project_name}}
      #     TF_VAR_REPO_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
      #   run: terraform apply -auto-approve -input=false

  build_s3:
    runs-on: ubuntu_latest
    needs: [ build_sm ]
    steps:
      - name: 파일 포맷팅
        id: fmt
        run: terraform fmt -check

      - name: S3 생성 준비
        id: plan_s3
        working-directory: ${{ env.working-directory }}/s3
        env:
          TF_VAR_AWS_ACESST_KEY: "${{secrets.AWS_ACCESS_KEY}}"
          TF_VAR_AWS_SECRET_ACCESS_KEY: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
          TF_VAR_PROJECT_NAME: ${{needs.set_environment.outputs.project_name}}
          TF_VAR_REPO_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
        run: terraform plan

      # - name: S3 생성
      #   id: apply_s3
      #   working-directory: ${{ env.working-directory }}/sm
      #   env:
      #     TF_VAR_AWS_ACESST_KEY: "${{secrets.AWS_ACCESS_KEY}}"
      #     TF_VAR_AWS_SECRET_ACCESS_KEY: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
      #     TF_VAR_PROJECT_NAME: ${{needs.set_environment.outputs.project_name}}
      #     TF_VAR_REPO_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
      #   run: terraform apply -auto-approve -input=false

  build_ecs:
    runs-on: ubuntu_latest
    needs: [ build_s3 ]
    steps:
      - name: 파일 포맷팅
        id: fmt
        run: terraform fmt -check

      - name: ECS 생성 준비
        id: plan_ecs
        working-directory: ${{ env.working-directory }}/ecs
        env:
          TF_VAR_AWS_ACESST_KEY: "${{secrets.AWS_ACCESS_KEY}}"
          TF_VAR_AWS_SECRET_ACCESS_KEY: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
          TF_VAR_PROJECT_NAME: ${{needs.set_environment.outputs.project_name}}
          TF_VAR_REPO_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
        run: terraform plan

      # - name: ECS 생성
      #   id: apply_ecs
      #   working-directory: ${{ env.working-directory }}/sm
      #   env:
      #     TF_VAR_AWS_ACESST_KEY: "${{secrets.AWS_ACCESS_KEY}}"
      #     TF_VAR_AWS_SECRET_ACCESS_KEY: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
      #     TF_VAR_PROJECT_NAME: ${{needs.set_environment.outputs.project_name}}
      #     TF_VAR_REPO_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
      #   run: terraform apply -auto-approve -input=false

  slack_noti:
    name: '배포 환경 인프라 구성'
    runs-on: ubuntu-latest
    needs: [ build_ecs ]
    env:
      init-working-directory: ./init
      working-directory: ./${{inputs.env}}
    steps:
    - name: 슬랙 알림
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        author_name: 배포 환경 인프라 구성자 # default: 8398a7@action-slack
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
      if: always()
      
      # Pick up events even if the job fails or is canceled.
# Pick up events even if the job fails or is canceled.
#       # On push to "main", build or change infrastructure according to Terraform configuration files
#       # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#     - name: Terraform Apply
# #       run: terraform apply -auto-approve -var input_var=${{env.INPUT_VAR}} -var project_name=${{ needs.set_environment.outputs.project_name }} -input=false
#       run: terraform apply -auto-approve -var env=${{ needs.set_environment.outputs.project_env }} -var project_name=${{ needs.set_environment.outputs.project_name }} -input=false
