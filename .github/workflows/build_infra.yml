name: 'build_infra'
on:
  workflow_dispatch:
    inputs:
      env:
        description: 배포 환경
        type: choice
        required: true
        options:
          - prod
          - dev

permissions:
  contents: read

jobs:
  set_environment:
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ steps.set_environment.outputs.project_name }}
      env: ${{ steps.set_environment.outputs.env }}
    steps:
      - id: set_environment
        name: Set Environment
        run: |
          echo "project_name=$(echo "${{ github.repository }}" | sed "s|${{ github.repository_owner }}\/||g")" >> $GITHUB_OUTPUT

  build_vpc:
    name: VPC Provisioning
    runs-on: ubuntu-latest
    needs: [set_environment]
    env:
      working-directory: ./${{inputs.env}}/vpc
    steps:
      - uses: actions/checkout@v3

      - name: VPC init
        run: terraform init
        working-directory: ${{env.working-directory}}

      - name: 파일 포맷팅 
        run: terraform fmt -check
        working-directory: ${{env.working-directory}}

      - name: Plan VPC
        working-directory: ${{env.working-directory}}
        env:
          TF_VAR_AWS_ACESST_KEY: "${{secrets.AWS_ACCESS_KEY}}"
          TF_VAR_AWS_SECRET_ACCESS_KEY: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
          TF_VAR_PROJECT_NAME: ${{needs.set_environment.outputs.project_name}}
          TF_VAR_REPO_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
        run: terraform plan

  build_sg:
    name: Security Group Provisioning
    runs-on: ubuntu-latest
    needs: [ build_vpc ]
    env:
      working-directory: ./${{inputs.env}}/sg

    steps:
      - uses: actions/checkout@v3
      
      - name: Security Group Init
        run: terraform init
        working-directory: ${{env.working-directory}}

      - name: 파일 포맷팅
        run: terraform fmt -check
        working-directory: ${{env.working-directory}}

      - name: Plan Security Group
        working-directory: ${{env.working-directory}}
        env:
          TF_VAR_AWS_ACESST_KEY: "${{secrets.AWS_ACCESS_KEY}}"
          TF_VAR_AWS_SECRET_ACCESS_KEY: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
          TF_VAR_PROJECT_NAME: ${{needs.set_environment.outputs.project_name}}
          TF_VAR_REPO_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
        run: terraform plan

  build_sm:
    name: Secret Manager Provisioning
    runs-on: ubuntu-latest
    needs: [ build_vpc ]
    env:
      working-directory: ./${{inputs.env}}/sm

    steps:
      - uses: actions/checkout@v3

      - name: Secret Manager Init
        run: terraform init
        working-directory: ${{env.working-directory}}

      - name: 파일 포맷팅
        run: terraform fmt -check
        working-directory: ${{env.working-directory}}

      - name: Plan SM
        working-directory: ${{env.working-directory}}
        env:
          TF_VAR_AWS_ACESST_KEY: "${{secrets.AWS_ACCESS_KEY}}"
          TF_VAR_AWS_SECRET_ACCESS_KEY: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
          TF_VAR_PROJECT_NAME: ${{needs.set_environment.outputs.project_name}}
          TF_VAR_REPO_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
        run: terraform plan

  build_s3:
    name: S3 Provisioning
    runs-on: ubuntu-latest
    needs: [ build_vpc ]
    env:
      working-directory: ./${{inputs.env}}/s3
    steps:
      - uses: actions/checkout@v3

      - name: S3 Init
        run: terraform init
        working-directory: ${{env.working-directory}}

      - name: 파일 포맷팅
        run: terraform fmt -check
        working-directory: ${{env.working-directory}}

      - name: Plan S3
        working-directory: ${{env.working-directory}}
        env:
          TF_VAR_AWS_ACESST_KEY: "${{secrets.AWS_ACCESS_KEY}}"
          TF_VAR_AWS_SECRET_ACCESS_KEY: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
          TF_VAR_PROJECT_NAME: ${{needs.set_environment.outputs.project_name}}
          TF_VAR_REPO_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
        run: terraform plan

  build_rds:
    name: RDS Provisioning
    runs-on: ubuntu-latest
    needs: [ build_sm ]
    env:
      working-directory: ./${{inputs.env}}/rds
    steps:
      - uses: actions/checkout@v3

      - name: RDS Init
        run: terraform init
        working-directory: ${{env.working-directory}}

      - name: 파일 포맷팅
        run: terraform fmt -check
        working-directory: ${{env.working-directory}}

      - name: Plan RDS
        working-directory: ${{env.working-directory}}
        env:
          TF_VAR_AWS_ACESST_KEY: "${{secrets.AWS_ACCESS_KEY}}"
          TF_VAR_AWS_SECRET_ACCESS_KEY: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
          TF_VAR_PROJECT_NAME: ${{needs.set_environment.outputs.project_name}}
          TF_VAR_REPO_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
        run: terraform plan

  build_ecs:
    name: ECS Provisioning
    runs-on: ubuntu-latest
    needs: [ build_vpc ]
    steps:
      - uses: actions/checkout@v3

      - name: ECS Init
        run: terraform init
        working-directory: ${{env.working-directory}}

      - name: 파일 포맷팅
        run: terraform fmt -check
        working-directory: ./${{inputs.env}}/ecs

      - name: ECS 생성 준비
        working-directory: ./${{inputs.env}}/ecs
        env:
          TF_VAR_AWS_ACESST_KEY: "${{secrets.AWS_ACCESS_KEY}}"
          TF_VAR_AWS_SECRET_ACCESS_KEY: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
          TF_VAR_PROJECT_NAME: ${{needs.set_environment.outputs.project_name}}
          TF_VAR_REPO_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
        run: terraform plan

  # slack_noti:
  #   name: '배포 환경 인프라 구성'
  #   runs-on: ubuntu-latest
  #   needs: [ build_ecs ]
  #   env:
  #     init-working-directory: ./init
  #     working-directory: ./${{inputs.env}}
  #   steps:
  #   - name: 슬랙 알림
  #     uses: 8398a7/action-slack@v3
  #     with:
  #       status: ${{ job.status }}
  #       author_name: 배포 환경 인프라 구성자 # default: 8398a7@action-slack
  #       fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
  #     env:
  #       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
  #     if: always()
      